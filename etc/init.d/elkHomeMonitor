#!/bin/sh
# Init script for elkHomeMonitor
#
### BEGIN INIT INFO
# Provides:          elkHomeMonitor
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:        Starts rxElectricUsage as a daemon.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

if [ `id -u` -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

name=rxElectricUsage
pidfile="/var/run/$name.pid"

ELKHM_HOME=/usr/local/bin
ELKHM_HEAP_SIZE="1g"
ELKHM_LOG_DIR=/var/log/elkHomeMonitor
ELKHM_LOG_FILE="${ELKHM_LOG_DIR}/$name.log"
ELKHM_NICE=19
KILL_ON_STOP_TIMEOUT=0

program=/root/elkHomeMonitor/bin/rxElectricUsage

quiet() {
  "$@" > /dev/null 2>&1
  return $?
}

start() {

  # Run the program!
  nice -n ${ELKHM_NICE} sh -c exec \"$program\" > "${ELKHM_LOG_DIR}/$name.stdout" 2> "${ELKHM_LOG_DIR}/$name.err" &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  echo "$name started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if [ status ]; then
    pid=`cat "$pidfile"`
    echo "Killing $name pid $pid with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 6 7 8 9 ; do
      echo "Waiting $name pid $pid to die..."
      status || break
      sleep 1
    done
    if status ; then
      if [ "$KILL_ON_STOP_TIMEOUT" == 1 ] ; then
        echo "Timeout reached. Killing $name pid $pid with SIGKILL. This may result in data loss."
        kill -KILL $pid
        echo "$name killed with SIGKILL."
      else
        echo "$name stop failed; still running."
        return 1 # stop timed out and not forced
      fi
    else
      echo "$name stopped."
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

reload() {
  if status ; then
    kill -HUP `cat "$pidfile"`
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
  fi
}

case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$name is already running"
    else
      start
      code=$?
    fi
    exit $code
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "$name is running"
    else
      echo "$name is not running"
    fi
    exit $code
    ;;
  reload) reload ;;
  restart)

    quiet
    RET=$?
    if [ ${RET} -ne 0 ]; then
      echo "Configuration error."
      exit ${RET}
    fi
    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|reload|restart|configtest}" >&2
    exit 3
  ;;
esac

exit $?

